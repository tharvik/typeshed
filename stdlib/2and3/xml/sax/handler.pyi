# Stubs for xml.sax.handler

from typing import List, Optional, Tuple, Union
from xml.sax.reader import Attributes, AttributesNS
from xml.sax.xmlreader import Locator


class ContentHandler:
    def setDocumentLocator(self, locator: Locator) -> None: ...
    def startDocument(self) -> None: ...
    def endDocument(self) -> None: ...
    def startPrefixMapping(self, prefix: str, uri: str) -> None: ...
    def endPrefixMapping(self, prefix: str) -> None: ...
    def startElement(self, name: str, attrs: Attributes) -> None: ...
    def endElement(self, name: str) -> None: ...
    def startElementNS(self, name: Tuple[Optional[str], str],
                       qname: Optional[str],
                       attrs: AttributesNS) -> None: ...
    def endElementNS(self, name: Tuple[Optional[str], str],
                     qname: Optional[str]) -> None: ...
    def characters(self, content: Union[str, bytes]) -> None: ...
    def ignorableWhitespace(self, whitespace: str) -> None: ...
    def processingInstruction(self, target: str, data: str) -> None: ...
    def skippedEntity(self, name: str) -> None: ...


class DTDHandler: ...
#    def notationDecl(self, name, publicId, systemId): ...
#    def unparsedEntityDecl(self, name, publicId, systemId, ndata): ...


class EntityResolver: ...
#    def resolveEntity(self, publicId, systemId): ...


class ErrorHandler: ...
#    def error(self, exception): ...
#    def fatalError(self, exception): ...
#    def warning(self, exception): ...


feature_namespaces = ...  # type: str
feature_namespace_prefixes = ...  # type: str
feature_string_interning = ...  # type: str
feature_validation = ...  # type: str
feature_external_ges = ...  # type: str
feature_external_pes = ...  # type: str
all_features = ...  # type: List[str]
property_lexical_handler = ...  # type: str
property_declaration_handler = ...  # type: str
property_dom_node = ...  # type: str
property_xml_string = ...  # type: str
all_properties = ...  # type: List[str]
