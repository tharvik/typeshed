# Stubs for xml.dom.minidom

from typing import IO, Optional, Union, overload
from xml.dom import (
    getDOMImplementation as getDOMImplementation,
    Node as NodeD, Attr as AttrD,
)
import xml.dom
from xml.sax.xmlreader import XMLReader

def parse(filename_or_file: Union[str, IO[str]],
          parser: Optional[XMLReader] = ...,
          bufsize: Optional[int] = ...) -> Document: ...
def parseString(string: str, parser: Optional[XMLReader] = ...) -> Document: ...


class Node(NodeD):
    def unlink(self) -> None: ...
    def writexml(self, writer: IO[str], indent: str = ...,
                 addindent: str = ..., newl: str = ...) -> None: ...
    @overload
    def toxml(self) -> str: ...
    @overload
    def toxml(self, encoding: str) -> Union[str, bytes]: ...
    def toprettyxml(self, indent: str = ..., newl: str = ...,
                    encoding: Optional[str] = ...) -> Union[str, bytes]: ...
    @property
    def nodeType(self) -> int: ...
    @property
    def parentNode(self) -> Optional[Node]: ...
    @property
    def attributes(self) -> Optional[NamedNodeMap]: ...
    @property
    def previousSibling(self) -> Optional[Node]: ...
    @property
    def nextSibling(self) -> Optional[Node]: ...
    @property
    def childNodes(self) -> List[Node]: ...  # type: ignore
    @property
    def firstChild(self) -> Optional[Node]: ...
    @property
    def lastChild(self) -> Optional[Node]: ...
    @property
    def localName(self) -> str: ...
    @property
    def prefix(self) -> Optional[str]: ...
    @property
    def namespaceURI(self) -> Optional[str]: ...
    @property
    def nodeName(self) -> Optional[str]: ...
    @property
    def nodeValue(self) -> Optional[str]: ...
    def hasAttributes(self) -> bool: ...
    def hasChildNodes(self) -> bool: ...
    def isSameNode(self, other: NodeD) -> bool: ...
    def appendChild(self, newChild: NodeD) -> None: ...
    def insertBefore(self, newChild: NodeD, refChild: Optional[NodeD]) -> Node: ...
    def removeChild(self, oldChild: NodeD) -> Node: ...
    def replaceChild(self, newChild: NodeD, oldChild: NodeD) -> None: ...
    def normalize(self) -> None: ...
    def cloneNode(self, deep: bool) -> Node: ...


class NodeList(xml.dom.NodeList):
    @property
    def length(self) -> int: ...
    def item(self, i: int) -> Optional[Node]: ...
    def __getitem__(self, i: int) -> Optional[Node]: ...


class Document(xml.dom.Document):
    @property
    def documentElement(self) -> Element: ...
    def createElement(self, tagName: str) -> Element: ...
    def createElementNS(self, namespaceURI: str, tagName: str) -> Element: ...
    def createTextNode(self, data: str) -> Text: ...
    def createComment(self, data: str) -> Comment: ...
    def createProcessingInstruction(self,  # type: ignore
                                    target: str,
                                    data: str) -> ProcessingInstruction: ...
    def createAttribute(self, name: str) -> Attr: ...
    def createAttributeNS(self, namespaceURI: str,
                          qualifiedName: str) -> Attr: ...
    def getElementsByTagName(self, tagName: str) -> NodeList: ...
    def getElementsByTagNameNS(self, namespaceURI: str,
                               localName: str) -> NodeList: ...


class Element(xml.dom.Element):
    @property
    def tagName(self) -> str: ...
    def getElementsByTagName(self, tagName: str) -> NodeList: ...
    def getElementsByTagNameNS(self, namespaceURI: str,
                               localName: str) -> NodeList: ...
    def hasAttribute(self, name: str) -> bool: ...
    def hasAttributeNS(self, namespaceURI: str, localName: str) -> bool: ...
    def getAttribute(self, name: str) -> str: ...
    def getAttributeNode(self, attrname: str) -> Attr: ...
    def getAttributeNS(self, namespaceURI: str, localName: str) -> str: ...
    def getAttributeNodeNS(self, namespaceURI: str, localName: str) -> Attr: ...
    def removeAttribute(self, name: str) -> None: ...
    def removeAttributeNode(self, oldAttr: AttrD) -> None: ...
    def removeAttributeNS(self, namespaceURI: str, localName: str) -> None: ...
    def setAttribute(self, name: str, value: str) -> None: ...
    def setAttributeNode(self, newAttr: AttrD) -> Node: ...
    def setAttributeNodeNS(self, newAttr: AttrD) -> Node: ...
    def setAttributeNS(self, namespaceURI: str, qname: str,
                       value: AttrD) -> None: ...


class Attr(AttrD):
    @property
    def name(self) -> str: ...
    @property
    def prefix(self) -> str: ...
    @property
    def value(self) -> Optional[str]: ...


class NamedNodeMap(xml.dom.NamedNodeMap):
    @property
    def length(self) -> int: ...
    def item(self, index: int) -> Attr: ...


class Comment(xml.dom.Comment):
    @property
    def data(self) -> str: ...


class Text(xml.dom.Text):
    @property
    def data(self) -> str: ...


class ProcessingInstruction(xml.dom.Text):
    @property
    def target(self) -> str: ...
    @property
    def data(self) -> str: ...
