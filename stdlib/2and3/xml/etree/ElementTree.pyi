# Stubs for xml.etree.ElementTree

from typing import IO, Iterator, Mapping, Optional, Sequence, Tuple, Union
import sys
from xml.parsers.expat import XMLParserType

_Text = Union[bytes, str]

def Comment(text: Optional[_Text] = ...) -> Element: ...
def dump(elem: Union[Element, ElementTree]) -> None: ...
def fromstring(text: str) -> Element: ...
def fromstringlist(sequence: Sequence[str],
                   parser: Optional[XMLParserType] = ...) -> Element: ...
def iselement(element: Element) -> bool: ...
def iterparse(source: Union[str, IO[str]], events: Optional[str] = ...,
              parser: Optional[XMLParser] = ...) -> Iterator[Tuple[str, Element]]: ...
def parse(source: Union[str, IO[str]],
          parser: Optional[XMLParserType] = ...) -> ElementTree: ...

def ProcessingInstruction(target: str,
                          text: Optional[str] = ...) -> Element: ...
def register_namespace(prefix: str, uri: str) -> None: ...
def SubElement(parent: Element, tag: _Text, attrib: Mapping[_Text, _Text] = ...,
               **extra: _Text) -> Element: ...
if sys.version_info >= (3, 4):
    # TODO find way to specifiy that by default, it returns bytes
    def tostring(element: Element, encoding: Optional[str] = ...,
                 method: Optional[str] = ...,
                 *, short_empty_elements: bool = ...) -> Union[str, bytes]: ...
    def tostringlist(element: Element, encoding: Optional[str] = ...,
                     method: Optional[str] = ..., *,
                     short_empty_elements: bool = ...) -> Union[List[bytes], List[str]]: ...
else:
    def tostring(element: Element, encoding: Optional[str] = ...,
                 method: Optional[str] = ...) -> Union[str, bytes]: ...
    def tostringlist(element: Element, encoding: Optional[str] = ...,
                     method: Optional[str] = ...) -> Union[List[bytes], List[str]]: ...
def XML(text: str, parser: Optional[XMLParserType] = ...) -> Element: ...
def XMLID(text: str,
          parser: Optional[XMLParserType] = ...) -> Tuple[Element, Mapping[str, Element]]: ...

#VERSION = ...  # type: Any

#class ParseError(SyntaxError): ...


class Element: ...
#    tag = ...  # type: Any
#    attrib = ...  # type: Any
#    text = ...  # type: Any
#    tail = ...  # type: Any
#    def __init__(self, tag, attrib=..., **extra): ...
#    def makeelement(self, tag, attrib): ...
#    def copy(self): ...
#    def __len__(self): ...
#    def __bool__(self): ...
#    def __getitem__(self, index): ...
#    def __setitem__(self, index, element): ...
#    def __delitem__(self, index): ...
#    def append(self, subelement): ...
#    def extend(self, elements): ...
#    def insert(self, index, subelement): ...
#    def remove(self, subelement): ...
#    def getchildren(self): ...
#    def find(self, path, namespaces=None): ...
#    def findtext(self, path, default=None, namespaces=None): ...
#    def findall(self, path, namespaces=None): ...
#    def iterfind(self, path, namespaces=None): ...
#    def clear(self): ...
#    def get(self, key, default=None): ...
#    def set(self, key, value): ...
#    def keys(self): ...
#    def items(self): ...
#    def iter(self, tag=None): ...
#    def getiterator(self, tag=None): ...
#    def itertext(self): ...


#PI = ...  # type: Any

#class QName:
#    text = ...  # type: Any
#    def __init__(self, text_or_uri, tag=None): ...
#    def __hash__(self): ...
#    def __le__(self, other): ...
#    def __lt__(self, other): ...
#    def __ge__(self, other): ...
#    def __gt__(self, other): ...
#    def __eq__(self, other): ...
#    def __ne__(self, other): ...

class ElementTree: ...
#    def __init__(self, element=None, file=None): ...
#    def getroot(self): ...
#    def parse(self, source, parser=None): ...
#    def iter(self, tag=None): ...
#    def getiterator(self, tag=None): ...
#    def find(self, path, namespaces=None): ...
#    def findtext(self, path, default=None, namespaces=None): ...
#    def findall(self, path, namespaces=None): ...
#    def iterfind(self, path, namespaces=None): ...
#    def write(self, file_or_filename, encoding=None, xml_declaration=None, default_namespace=None, method=None, *, short_empty_elements=True): ...
#    def write_c14n(self, file): ...


#class _ListDataStream(io.BufferedIOBase):
#    lst = ...  # type: Any
#    def __init__(self, lst): ...
#    def writable(self): ...
#    def seekable(self): ...
#    def write(self, b): ...
#    def tell(self): ...


#class XMLPullParser:
#    def __init__(self, events=None, *, _parser=None): ...
#    def feed(self, data): ...
#    def close(self): ...
#    def read_events(self): ...

#class _IterParseIterator:
#    root = ...  # type: Any
#    def __init__(self, source, events, parser, close_source=False): ...
#    def __next__(self): ...
#    def __iter__(self): ...



#class TreeBuilder:
#    def __init__(self, element_factory=None): ...
#    def close(self): ...
#    def data(self, data): ...
#    def start(self, tag, attrs): ...
#    def end(self, tag): ...

class XMLParser: ...
#    parser = ...  # type: Any
#    target = ...  # type: Any
#    entity = ...  # type: Any
#    version = ...  # type: Any
#    def __init__(self, html=0, target=None, encoding=None): ...
#    def doctype(self, name, pubid, system): ...
#    def feed(self, data): ...
#    def close(self): ...
